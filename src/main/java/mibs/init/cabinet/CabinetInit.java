/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mibs.init.cabinet;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.concurrent.TimeoutException;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.swing.AbstractButton;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.SerializationUtils;
import org.jdatepicker.JDatePicker;
import org.jdatepicker.impl.JDatePickerImpl;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class CabinetInit extends JFrame implements ActionListener, QueueHandler {

	private static final long serialVersionUID = 1L;
	
	private static final int textWidth = 240;
	private static final int textHeight= 24;
	
	private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
	
	private static final String EXCHANGE_NAME = "amq.direct";
	private static final String SRC_PATH = "/home/admin2/storage/DICOM/1554293765-8E26DF76/temp";
	

	private JPanel statusBar = new JPanel( new FlowLayout(FlowLayout.LEFT)  );
	private final JLabel statusLabel = new JLabel();
	
	private final JTabbedPane tabbedPane = new JTabbedPane();
	private JPanel panel = new JPanel();
	
	private CPanel panel1 = new CPanel( );
	private CPanel panel2 = new CPanel();
	private CPanel panel3 = new CPanel( );
	private CPanel panel4 = new CPanel();
	
	
	private JLabel lb1 =  new JLabel();;
	private JLabel lb2 = new JLabel();
	
	private JLabel labelFirstName = new JLabel();
	private JLabel labelPatronymic = new JLabel();
	private JLabel labelLastName = new JLabel();
	private JLabel labelBirthday = new JLabel();
	private JTextField textFirstName = new JTextField();
	private JTextField textPatronymic = new JTextField();
	private JTextField textLastName = new JTextField();
	private JTextField textBirthday  = new JTextField();
	
	private JLabel labelEmail1 = new JLabel();
	private JLabel labelEmail2 = new JLabel();
	private JLabel labelEmail3 = new JLabel();
	private JLabel labelEmail4 = new JLabel();	
	private JTextField textEmail1  = new JTextField();
	private JTextField textEmail2  = new JTextField();
	private JTextField textEmail3  = new JTextField();
	private JTextField textEmail4  = new JTextField();
	
	private JLabel labelConclusion2 = new JLabel();
	private JLabel labelConclusion3 = new JLabel();
	private JTextField textConclusion2  = new JTextField();
	private JTextField textConclusion3  = new JTextField();
	
	
	private JLabel labelExploration2 = new JLabel();
	private JLabel labelExploration3 = new JLabel();
	private JTextField textExploration3  = new JTextField();
	
	
	private JLabel labelExplorationID2 = new JLabel();
	private JLabel labelExplorationID3 = new JLabel();
	private JTextField textExplorationID2  = new JTextField();
	private JTextField textExplorationID3  = new JTextField();
	
	private final JLabel labelProlong = new JLabel();
	private final JTextField textProlong = new JTextField();
	
	
	private final Dimension textSize = new Dimension(textWidth, textHeight);

	private JButton sendButton1, sendButton2, sendButton3, sendButton4, openConclusion, openExploration;
	
	private final JFileChooser conclusionChooser = new JFileChooser();
	private final JFileChooser explorationChooser = new JFileChooser();
	
	private Channel channel = null;
	private Connection connection = null;
	
	public CabinetInit() {
		
		super( PROG_CAPTION );
	
		initResponceCommands( (s) -> JOptionPane.showMessageDialog(this, s) );
	
		initControls();
		
		initActionPerfomance();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		panel.setOpaque(true);
		setContentPane(panel);
		
		//setSize(new Dimension(600, 250));
		pack();
		setVisible(true);
		//setResizable(false);
		
		try {
			
			init_rabbitmq_connection_and_subscribe( host, login, password);
			
			say_connection_active( (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( CONNECTION_ACTIVATED ), host );
			
		} catch (IOException e) {
			say_connection_error(  (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_CONNECTION ), host  );
		} catch (TimeoutException e) {
			say_connection_error(  (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_CONNECTION ), host  );
		}
		
	}


	private void say_connection_active( BiConsumer<String,String> callback, String host, String msg ) {
		
		callback.accept(host, msg);
	}
	private void say_connection_error( BiConsumer<String,String> callback, String host, String msg ) {
		
		callback.accept(host, msg);
	}
	
	private void say_wrongEmail(Consumer<String> callback, String email) {
		
		callback.accept( MessageFormat.format( bundle.getString( ERROR_EMAIL ), email) ) ;
	}
	
	private void initActionPerfomance() {
		
		sendButton1.addActionListener((e)->{
			String firstName = textFirstName.getText();
			String lastName = textLastName.getText();
			String patronymic = textPatronymic.getText();
			String email  = textEmail1.getText();
			try {
				LocalDate birthday =  LocalDate.parse(textBirthday.getText(), formatter);
				Person person = new Person(firstName, lastName, patronymic, birthday, email);
				RabbitmqCommandMessage<Person> message = new RabbitmqCommandMessage<>(CMD_INIT_CABINET, person);
				publisToLocalIN(channel,message, (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_PUBLISH ), host  );

			}catch( IllegalArgumentException e1) {
				
				say_wrongEmail( (s) -> JOptionPane.showMessageDialog(this, s,  bundle.getString( ERROR_TITLE ), JOptionPane.ERROR_MESSAGE), email );
			}
			
			catch( DateTimeParseException e2) {
				
				System.out.println("error " + e2.getMessage());
			}
		
		});
		sendButton2.addActionListener((e)->{
			String email = textEmail2.getText();
			String _path = textConclusion2.getText();
			String uniqueId = textExplorationID2.getText();
			Path path = Paths.get(_path);
			try {
				String conclusionName = path.getFileName().toString();
				byte[] conclusionContent = Files.readAllBytes( path );
				Conclusion conclusion = new Conclusion( email, conclusionName, conclusionContent, uniqueId);
				RabbitmqCommandMessage<Conclusion> message = new RabbitmqCommandMessage<>(CMD_ADD_CONCLUSION, conclusion);
				publisToLocalIN(channel,message, (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_PUBLISH ), host  );
			
			} catch (IOException e1) {
				statusLabel.setText( MessageFormat.format( bundle.getString( ERROR_PUBLISH ), host  ));
			}
		});
		sendButton3.addActionListener((e)->{
			String email = textEmail3.getText();
			String uniqueID = textExplorationID3.getText();
			String folderName = textExploration3.getText();
			Exploration exploration = new Exploration(email, uniqueID, folderName);
			RabbitmqCommandMessage<Exploration> message = new RabbitmqCommandMessage<>(CMD_ADD_EXPLORATION, exploration);
			publisToLocalIN(channel,message, (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_PUBLISH ), host  );
		});
		sendButton4.addActionListener((e)->{
			String email = textEmail4.getText();
			LocalDate prolongDate = LocalDate.parse( textProlong.getText() , formatter);
			Prolong prolong = new Prolong(email,prolongDate );
			RabbitmqCommandMessage<Prolong> message = new RabbitmqCommandMessage<>(CMD_PROLONG_CABINET, prolong);
			publisToLocalIN(channel,message, (u,v) -> statusLabel.setText( MessageFormat.format( u , v)), bundle.getString( ERROR_PUBLISH ), host  );
			
		});
	}
	@Override
	public void actionPerformed(ActionEvent e) {
	
	}
	private void initControls() {
		statusBar.setPreferredSize(new Dimension(200, 16));
		statusBar.add( statusLabel );
		sendButton1 = new JButton(bundle.getString(BUTTON_SEND1));
		sendButton2 = new JButton(bundle.getString(BUTTON_SEND2));
		sendButton3 = new JButton(bundle.getString(BUTTON_SEND2));
		sendButton4 = new JButton(bundle.getString(BUTTON_PROLONG));
		
		openConclusion = new JButton("...") ;
		openConclusion.addActionListener( ( e )->{
			 int returnVal = conclusionChooser.showOpenDialog(this);
		     if (returnVal == JFileChooser.APPROVE_OPTION) {
		           File file = conclusionChooser.getSelectedFile();
		           textConclusion2.setText( file.getAbsoluteFile().toString() );
		        }
		});
		openExploration = new JButton("...") ;
		openExploration.addActionListener( ( e )->{
			 explorationChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			 int returnVal = explorationChooser.showOpenDialog(this);
		     if (returnVal == JFileChooser.APPROVE_OPTION) {
		           File file = explorationChooser.getSelectedFile();
		           textExploration3.setText( file.getAbsoluteFile().toString() );
		        }
		});
		
		labelFirstName.setText( bundle.getString(FIRST_NAME) + ":" );
		
		labelPatronymic.setText( bundle.getString(PATRONYMIC) +":" );
		labelLastName.setText( bundle.getString(LAST_NAME) +":" );
		labelBirthday.setText( bundle.getString(BIRTHDAY) +":" );
		
		labelEmail1.setText( bundle.getString(EMAIL) +":" );
		labelEmail2.setText( bundle.getString(EMAIL) +":" );
		labelEmail3.setText( bundle.getString(EMAIL) +":" );
		labelEmail4.setText( bundle.getString(EMAIL) +":" );
		
		labelConclusion2.setText( bundle.getString( CONCLUSION ) +":" );
		labelExploration2.setText( bundle.getString( EXPLORATION ) +":" );
		labelExplorationID2.setText( bundle.getString( EXPLORATIONID ) +":" );
		
		labelConclusion3.setText( bundle.getString( CONCLUSION ) +":" );
		labelExploration3.setText( bundle.getString( EXPLORATION ) +":" );
		labelExplorationID3.setText( bundle.getString( EXPLORATIONID ) +":" );
		
		labelProlong.setText( bundle.getString( DATE ) +":" );	
		
		textFirstName.setPreferredSize( textSize );
		textPatronymic.setPreferredSize( textSize );
		textLastName.setPreferredSize( textSize );
		textBirthday.setPreferredSize( textSize );
		textEmail1.setPreferredSize( textSize );
		textEmail2.setPreferredSize( textSize );
		textEmail3.setPreferredSize( textSize );
		textEmail4.setPreferredSize( textSize );
		textExplorationID2.setPreferredSize( textSize );
		textExplorationID2.setPreferredSize( textSize );
		textExplorationID3.setPreferredSize( textSize );
		textExploration3.setPreferredSize( textSize );
		
		textConclusion2.setPreferredSize( textSize );
		textProlong.setPreferredSize( textSize );
		
		textProlong.setText( formatter.format( LocalDate.now().plusDays(365) ) );
	
		tabbedPane.setBounds(50,50,200,200);  
		tabbedPane.add( bundle.getString(BUTTON_INIT_CABINET), panel1);
		tabbedPane.add( bundle.getString(BUTTON_ADD_CONCLUSION), panel2);
		tabbedPane.add( bundle.getString(BUTTON_ADD_EXPLORATION), panel3);
		tabbedPane.add( bundle.getString(BUTTON_PROLONG_CABINET), panel4);
		
		setLayoutPanel();
		 
		setLayoutPanel1();
		setLayoutPanel2() ;
		setLayoutPanel3() ;
		setLayoutPanel4();
	}

	
	private void setLayoutPanel4() {
		GroupLayout layout = new GroupLayout(panel4);
		panel4.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			      .addGroup(layout.createSequentialGroup()
			    		  .addGroup(layout.createParallelGroup( )
			    				  .addComponent(labelEmail4)
			    				  .addComponent(labelProlong)
			    	    				 
			    			 )
			    		  .addGroup(layout.createParallelGroup(  )
			    				  .addComponent(textEmail4)	
			    	    		  .addComponent(textProlong)
			    			 )
			    		  )
			     
			      .addComponent( sendButton4 )
	);
	layout.setVerticalGroup(layout.createSequentialGroup()
			
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					  .addComponent(labelEmail4)	
					  .addComponent(textEmail4)
					  
				)
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
			   
					  .addComponent(labelProlong)	
					  .addComponent(textProlong)	
				 )
			 
			   .addComponent( sendButton4 )
			  
			);
	}
	
	private void setLayoutPanel3() {
		GroupLayout layout = new GroupLayout(panel3);
		panel3.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			      .addGroup(layout.createSequentialGroup()
			    		  .addGroup(layout.createParallelGroup( )
			    				  .addComponent(labelEmail3)	
			    	    		  .addComponent(labelExplorationID3)	
			    	    		  .addComponent(labelExploration3)
			    	    				 
			    			 )
			    		  .addGroup(layout.createParallelGroup(  )
			    				  .addComponent(textEmail3)	
			    	    		  .addComponent(textExplorationID3)
			    	    		  .addGroup(layout.createSequentialGroup()
			    	    				  .addComponent(textExploration3)
			    	    				  .addComponent(openExploration)
			    	    				 
		    	    				 )		 
			    			 )
			    		  )
			     
			      .addComponent( sendButton3 )
	);
	layout.setVerticalGroup(layout.createSequentialGroup()
			
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					  .addComponent(labelEmail3)	
					  .addComponent(textEmail3)
					  
				)
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
			   
					  .addComponent(labelExplorationID3)	
					  .addComponent(textExplorationID3)	
				 )
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					  .addComponent(labelExploration3)
					  .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
							  	.addComponent(textExploration3)
							  	 .addComponent(openExploration)
							  )
					
						  
				)
			   .addComponent( sendButton3 )
			  
			);
	}
	
	private void setLayoutPanel2() {
		GroupLayout layout = new GroupLayout(panel2);
		panel2.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			      .addGroup(layout.createSequentialGroup()
			    		  .addGroup(layout.createParallelGroup( )
			    				  .addComponent(labelEmail2)	
			    	    		  .addComponent(labelExplorationID2)	
			    	    		  .addComponent(labelConclusion2)
			    	    				 
			    			 )
			    		  .addGroup(layout.createParallelGroup(  )
			    				  .addComponent(textEmail2)	
			    	    		  .addComponent(textExplorationID2)
			    	    		  .addGroup(layout.createSequentialGroup()
			    	    				  .addComponent(textConclusion2)
			    	    				  .addComponent(openConclusion)
			    	    				 
		    	    				 )		 
			    			 )
			    		  )
			     
			      .addComponent( sendButton2 )
	);
	layout.setVerticalGroup(layout.createSequentialGroup()
			
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					  .addComponent(labelEmail2)	
					  .addComponent(textEmail2)
					  
				)
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
			   
					  .addComponent(labelExplorationID2)	
					  .addComponent(textExplorationID2)	
				 )
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					  .addComponent(labelConclusion2)
					  .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
							  	.addComponent(textConclusion2)
							  	 .addComponent(openConclusion)
							  )
					
						  
				)
			   .addComponent( sendButton2 )
			  
			);
	}
	
	private void setLayoutPanel1() {
		
		GroupLayout layout = new GroupLayout(panel1);
		panel1.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			  
			      .addGroup(layout.createSequentialGroup()
			    		  .addGroup(layout.createParallelGroup( )
			    				  .addComponent(labelLastName)	
			    				  .addComponent(labelFirstName)	
			    	    		  .addComponent(labelPatronymic)
			    	    		  .addComponent(labelBirthday)
			    	    		  .addComponent(labelEmail1)
			    			 )
			    		  .addGroup(layout.createParallelGroup(  )
			    				  .addComponent(textLastName)
			    				  .addComponent(textFirstName)	
			    	    		  .addComponent(textPatronymic)
			    	    		  .addComponent(textBirthday)
			    	    		  .addComponent(textEmail1)
			    			 )
			    		  )
			   
			      .addComponent(sendButton1)
	);
	layout.setVerticalGroup(layout.createSequentialGroup()
			 
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE )
					   .addComponent(labelLastName)	
					   .addComponent(textLastName)	
				)
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE)
			   
					   .addComponent(labelFirstName)	
						  .addComponent(textFirstName)
				 )
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
						  .addComponent(labelPatronymic)	
						  .addComponent(textPatronymic)	  
						  
				)
			   .addGroup(layout.createParallelGroup( GroupLayout.Alignment.BASELINE )
					   .addComponent(labelBirthday)	
	    	    	   .addComponent(textBirthday)
					 
				  )
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					   .addComponent(labelEmail1)	
	    	    	   .addComponent(textEmail1)
					 
				  )
			 
			   .addComponent(sendButton1)
			  
			);
	}
	private void setLayoutPanel() {
		GroupLayout layout = new GroupLayout(panel);
		panel.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			      .addComponent(tabbedPane)
			      .addComponent(statusBar)
			      .addGap(20)
				);
		layout.setVerticalGroup(layout.createSequentialGroup()
			   .addComponent(tabbedPane)
			   .addComponent(statusBar)
			   .addGap(20)
			);
	}
	
	private  void init_rabbitmq_connection_and_subscribe(String host, String user, String password) throws IOException, TimeoutException {

		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost( host );
		factory.setUsername( user );
		factory.setPassword( password );
		factory.setPort( 5672 );
		connection = factory.newConnection();
		channel = connection.createChannel();
		channel.queueDeclare("localin", true, false, false, null);
		channel.queueDeclare("localout", true, false, false, null);

		@SuppressWarnings("unchecked")
		DeliverCallback deliverCallback = (consumerTag, delivery) -> {
			RabbitmqCommandMessage<?> msg = (RabbitmqCommandMessage<?>) SerializationUtils.deserialize( delivery.getBody() );
			responceCommands.get( msg.getCommand() ).accept( (RabbitmqCommandMessage<? extends Serializable> ) msg );
		};
		channel.basicConsume("localout", true, deliverCallback, consumerTag -> {});

		System.out.println(" [*] Waiting for messages. To exit press CTRL+C");
	}

	public String getGreeting() {
		return "Hello world.";
	}
	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new CabinetInit();
			}
		});
	}
	
}
