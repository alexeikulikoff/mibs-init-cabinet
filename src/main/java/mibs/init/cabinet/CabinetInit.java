/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mibs.init.cabinet;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.concurrent.TimeoutException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.swing.AbstractButton;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.SerializationUtils;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class CabinetInit extends JPanel implements ActionListener {

	protected static final String CMD_INIT_CABINET = "INIT";
	protected static final String CMD_INITIALIZED	= "INITIALIZED";
	protected static final String CMD_ADD_CONCLUSION = "ADD";
	protected static final String CMD_PROLONG_CABINET = "PROLONG";
	protected static final String CMD_BLOCK_CABINET = "BLOCK";
	protected static final String CMD_PING = "PING";

	private static final String DST_PATH = "/home/admin2/temp10/";
	int i = 0;

	public String getGreeting() {
		return "Hello world.";
	}

	Channel channel = null;
	Connection connection = null;

	public CabinetInit() {
		lb1 = new JLabel("Rabbitmq connection state: not connected");
		lb2 = new JLabel("Command result:");
		b1 = new JButton("Add Dicom");
	//	b2.setVerticalTextPosition(AbstractButton.BOTTOM);
	//	b2.setHorizontalTextPosition(AbstractButton.CENTER);
	
		b2 = new JButton("Add Dicom");
		
		GroupLayout layout = new GroupLayout(this);
		setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		layout.setHorizontalGroup(layout.createParallelGroup()
				      .addComponent(lb1)
				      .addGroup(layout.createSequentialGroup()
				    		  .addComponent(b1)	
				    		  .addComponent(b2)	  
				    		  )
				      .addComponent(lb2)
		);
		layout.setVerticalGroup(
				   layout.createSequentialGroup()
				   .addComponent(lb1)
				   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				           .addComponent(b1)
				           .addComponent(b2)
				           )
				   .addComponent(lb2)
				);

		
		
	
/*		b1 = new JButton("Connect");
		b1.setVerticalTextPosition(AbstractButton.CENTER);
		b1.setHorizontalTextPosition(AbstractButton.LEADING); // aka LEFT, for left-to-right locales
		b1.setActionCommand("connect");

		b2 = new JButton("Add Dicom");
		b2.setVerticalTextPosition(AbstractButton.BOTTOM);
		b2.setHorizontalTextPosition(AbstractButton.CENTER);
		b2.setActionCommand("add_dicom");

		b3 = new JButton("Zip");
		b3.setActionCommand("zip");

		b4 = new JButton("UnZip");
		b4.setActionCommand("unzip");

		b5 = new JButton("New Cabinet");
		b5.setActionCommand("create_new_cabinet");

		b1.addActionListener(this);
		b2.addActionListener(this);
		b3.addActionListener(this);
		b4.addActionListener(this);
		b5.addActionListener(this);

		add(lb1);
		add(b1);
		add(b5);
		add(b2);
		add(b3);
		add(b4);
*/
	}

	private static final String EXCHANGE_NAME = "amq.direct";
	private static final String SRC_PATH = "/home/admin2/storage/DICOM/1554293765-8E26DF76/temp";
	protected JButton b1, b2, b3, b4, b5;
	protected JLabel lb1, lb2;
	public static void main(String[] args) {
		CabinetInit cbi = new CabinetInit();
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				cbi.createAndShowGUI();
			}
		});
	}

	private  void createAndShowGUI() {

		
		JFrame frame = new JFrame("Cabinet Commands");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		CabinetInit newContentPane = new CabinetInit();
		newContentPane.setOpaque(true); // content panes must be opaque
		frame.setContentPane(newContentPane);
		frame.setSize(new Dimension(600, 250));
		// Display the window.
		//frame.pack();
		frame.setVisible(true);
		
		try {
			init_rabbitmq_connection_and_subscribe("172.16.29.255","admin2","kukla");
		
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TimeoutException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Initialize Rabbitmq connection and subscibe to local queue
	 * @param host     ip address or hostname for rabbitmq service
	 * @param user     use name for rabbitmq access
	 * @param password password for rabbitmq access
	 * @throws IOException
	 * @throws TimeoutException
	 */
	private void init_rabbitmq_connection_and_subscribe(String host, String user, String password)
			throws IOException, TimeoutException {

		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost( host );
		factory.setUsername( user );
		factory.setPassword( password );
		factory.setPort( 5672 );
		connection = factory.newConnection();
		channel = connection.createChannel();

		channel.queueDeclare("localin", true, false, false, null);
		channel.queueDeclare("localout", true, false, false, null);

		DeliverCallback deliverCallback = (consumerTag, delivery) -> {
			
			RabbitmqCommandMessage<?> msg = (RabbitmqCommandMessage<?>) SerializationUtils.deserialize(delivery.getBody());
			
			String cmd = msg.getCommand();
			System.out.println( msg );
			switch( cmd ){
				case CMD_INITIALIZED : System.out.println("Cabinet initialized "); break;
				
				
			}
			Person p = (Person) msg.getContent();
			System.out.println( msg );
			
	//		 commands.get(msg.getCommand()).accept(msg);
		};

		channel.basicConsume("localout", true, deliverCallback, consumerTag -> {});

		System.out.println(" [*] Waiting for messages. To exit press CTRL+C");
	}
	/**
	 * 
	 * @param firstName
	 * @param secondName
	 * @param serName
	 * @param date
	 * @param email
	 * @throws IOException
	 * @throws TimeoutException
	 */
	private void create_new_cabinet(String firstName, String secondName, String serName, String date, String email)  {
		
		Person person = new Person( firstName, secondName, serName, date, email );

		RabbitmqCommandMessage<Person> cmd = new RabbitmqCommandMessage<>(CMD_INIT_CABINET,  person);

		byte[] rc = SerializationUtils.serialize(cmd);

		try {
			channel.basicPublish("", "localin", null, rc );
		
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	private void make7Z() throws IOException {

		Files.list(Paths.get(SRC_PATH)).filter((s) -> !s.toString().endsWith("zip")).forEach((fn) -> {
			String zipName = FilenameUtils.removeExtension(fn.getFileName().toString()) + ".zip";
			try {
				ByteArrayOutputStream bos = new ByteArrayOutputStream();
				ZipOutputStream zipOut = new ZipOutputStream(bos);
				File fileToZip = new File(fn.toString());
				FileInputStream fis = new FileInputStream(fileToZip);
				ZipEntry zipEntry = new ZipEntry(fileToZip.getName());
				try {
					zipOut.putNextEntry(zipEntry);
					IOUtils.copy(fis, zipOut);
					zipOut.flush();
					bos.flush();
					zipOut.close();
					fis.close();
					byte[] bytes = bos.toByteArray();
					bos.close();
					RabbitmqDicomMessage msg = new RabbitmqDicomMessage(zipName, bytes);
					byte[] rc = SerializationUtils.serialize(msg);
					System.out.println(fn.getFileName().toString() + "  " + rc.length);
					channel.basicPublish(EXCHANGE_NAME, "", true, false, null, rc);
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (FileNotFoundException e1) {

				e1.printStackTrace();
			}

		});

		System.out.println(" Total messages'" + i + "'");

	}

	private void testComress() {

	}

	

	@Override
	public void actionPerformed(ActionEvent e) {
		switch (e.getActionCommand()) {
	
		case "add_dicom": {
			try {
				make7Z();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			break;

		}
		case "zip": {
			testComress();
			System.out.println("zip");
			break;
		}
		case "unzip": {
			System.out.println("unzip");
			break;
		}
		case "create_new_cabinet": {
			create_new_cabinet("Jhon", "Dir","Zippo","12-01-02 1998", "bobo@bubu.com");
			break;
			}
		}

	}
}
