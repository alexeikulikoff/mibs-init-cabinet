/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mibs.init.cabinet;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.swing.AbstractButton;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.SerializationUtils;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class CabinetInit extends JFrame implements ActionListener, Commands {

	private static final long serialVersionUID = 1L;
	
	private static final String EXCHANGE_NAME = "amq.direct";
	private static final String SRC_PATH = "/home/admin2/storage/DICOM/1554293765-8E26DF76/temp";
	
	private JPanel panel = new JPanel();
	
	private JLabel lb1 =  new JLabel();;
	private JLabel lb2 = new JLabel();
	
	private JLabel labelFirstName = new JLabel();
	private JLabel labelSecondName = new JLabel();
	private JLabel labelLastName = new JLabel();
	private JLabel labelBirthday = new JLabel();
	private JLabel labelEmail = new JLabel();
	
	private JTextField textFirstName = new JTextField();
	private JTextField textSecondName = new JTextField();
	private JTextField textLastName = new JTextField();
	private JTextField textBirthday  = new JTextField();
	private JTextField textEmail  = new JTextField();
	
	private JPanel panel1 = new JPanel();
	private JPanel panel2 = new JPanel();
	
	private JButton b1, b2, b3, b4;
	
	private Channel channel = null;
	private Connection connection = null;
	
	public CabinetInit() {
		
		super( PROG_CAPTION );
			
		initResponceCommands( lb2 );
		initControls();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		panel.setOpaque(true);
		setContentPane(panel);
		
		setLayout();
		
		setSize(new Dimension(600, 250));
	//	pack();
		setVisible(true);
		try {
			
			init_rabbitmq_connection_and_subscribe( host ,login ,password);
			initActionCommands( channel, lb2 );
			say_connection_active( host );
		} catch (IOException e) {
			say_connection_error( host );
		} catch (TimeoutException e) {
			say_connection_error( host );
		}
		
	}


	private void say_connection_active( String host ) {
		lb1.setText(  MessageFormat.format( bundle.getString( CONNECTION_ACTIVATED ), host ) );
		lb1.setForeground(Color.black);
	}
	private void say_connection_error(String host) {
		lb1.setText( MessageFormat.format( bundle.getString( ERROR_CONNECTION ), host ) );
		lb1.setForeground( Color.red );
	}
	
	private void setLayout() {
		
		GroupLayout layout = new GroupLayout(panel1);
		panel1.setLayout(layout);
		layout.setAutoCreateGaps(true);
		layout.setAutoCreateContainerGaps(true);
		
		layout.setHorizontalGroup(layout.createParallelGroup(  )
			      .addComponent(lb1)
			      .addGroup(layout.createSequentialGroup()
			    		  .addGroup(layout.createParallelGroup( )
			    				  .addComponent(labelFirstName)	
			    	    		  .addComponent(labelSecondName)
			    	    		  .addComponent(labelLastName)	
			    	    		  .addComponent(labelBirthday)
			    	    		  .addComponent(labelEmail)
			    			 )
			    		  .addGroup(layout.createParallelGroup(  )
			    				  .addComponent(textFirstName)	
			    	    		  .addComponent(textSecondName)
			    	    		  .addComponent(textLastName)	
			    	    		  .addComponent(textBirthday)
			    	    		  .addComponent(textEmail)
			    			 )
			    		  )
			      .addComponent(lb2)
			      .addGroup(layout.createSequentialGroup()
			    		  .addComponent(b1)	
			    		  .addComponent(b2)	  
			    		  .addComponent(b3)	  
			    		  .addComponent(b4)	  
			    		  )
			     
	);
	layout.setVerticalGroup(layout.createSequentialGroup()
			   .addComponent(lb1)
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					  .addComponent(labelFirstName)	
					  .addComponent(textFirstName)
					  
				)
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					  .addComponent(labelSecondName)	
					  .addComponent(textSecondName)	  
					  
				)
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
			   
					  .addComponent(labelLastName)	
					   .addComponent(textLastName)	
				 )
			   
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					   .addComponent(labelBirthday)	
	    	    	   .addComponent(textBirthday)
					 
				  )
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
					   .addComponent(labelEmail)	
	    	    	   .addComponent(textEmail)
					 
				  )
			   .addComponent(lb2)
			   .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
			           .addComponent(b1)
			           .addComponent(b2)
			           .addComponent(b3)
			           .addComponent(b4)
			           )
			  
			);


	}
	private void initControls() {
		
		panel.add(panel1);
		panel1.setVisible(true);
		
		labelFirstName.setText( bundle.getString(FIRST_NAME) + ":" );
		labelSecondName.setText( bundle.getString(SECOND_NAME) +":" );
		labelLastName.setText( bundle.getString(LAST_NAME) +":" );
		labelBirthday.setText( bundle.getString(BIRTHDAY) +":" );
		labelEmail.setText( bundle.getString(EMAIL) +":" );
		
		textFirstName.setText( "Petrov" );
		textSecondName.setText( "Ivan" );
		textLastName.setText( "Ivanovich" );
		textBirthday.setText( "1991" );
		textEmail.setText( "bonobo@mail.dot.com" );
		
		lb2.setText("Cabinet state:");
		b1 = new JButton(bundle.getString(BUTTON_INIT_CABINET));
		b1.setActionCommand(CMD_INIT_CABINET);
		b1.addActionListener(this);
		
		
		b2 = new JButton(bundle.getString(BUTTON_ADD_CONCLUSION));
		b2.setActionCommand(CMD_ADD_CONCLUSION);
		b2.addActionListener(this);
		
		b3 = new JButton("Add Dicom");
		b3.setActionCommand("Add_Dicom3");
		b3.addActionListener(this);
		
		b4 = new JButton("Add Dicom again ");
		b4.setActionCommand("Add_Dicom4");
		b4.addActionListener(this);
		
	}
	private  void init_rabbitmq_connection_and_subscribe(String host, String user, String password) throws IOException, TimeoutException {

		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost( host );
		factory.setUsername( user );
		factory.setPassword( password );
		factory.setPort( 5672 );
		connection = factory.newConnection();
		channel = connection.createChannel();
		channel.queueDeclare("localin", true, false, false, null);
		channel.queueDeclare("localout", true, false, false, null);

		DeliverCallback deliverCallback = (consumerTag, delivery) -> {
			RabbitmqCommandMessage<?> msg = (RabbitmqCommandMessage<?>) SerializationUtils.deserialize(delivery.getBody());
			responceCommands.get( msg.getCommand() ).accept( (RabbitmqCommandMessage<Person>) msg );
		};
		channel.basicConsume("localout", true, deliverCallback, consumerTag -> {});

		System.out.println(" [*] Waiting for messages. To exit press CTRL+C");
	}
	private void make7Z() throws IOException {

		Files.list(Paths.get(SRC_PATH)).filter((s) -> !s.toString().endsWith("zip")).forEach((fn) -> {
			String zipName = FilenameUtils.removeExtension(fn.getFileName().toString()) + ".zip";
			try {
				ByteArrayOutputStream bos = new ByteArrayOutputStream();
				ZipOutputStream zipOut = new ZipOutputStream(bos);
				File fileToZip = new File(fn.toString());
				FileInputStream fis = new FileInputStream(fileToZip);
				ZipEntry zipEntry = new ZipEntry(fileToZip.getName());
				try {
					zipOut.putNextEntry(zipEntry);
					IOUtils.copy(fis, zipOut);
					zipOut.flush();
					bos.flush();
					zipOut.close();
					fis.close();
					byte[] bytes = bos.toByteArray();
					bos.close();
					RabbitmqDicomMessage msg = new RabbitmqDicomMessage(zipName, bytes);
					byte[] rc = SerializationUtils.serialize(msg);
					System.out.println(fn.getFileName().toString() + "  " + rc.length);
					channel.basicPublish(EXCHANGE_NAME, "", true, false, null, rc);
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (FileNotFoundException e1) {

				e1.printStackTrace();
			}

		});
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		String command = e.getActionCommand();
		Person person = new Person(textFirstName.getText(),textSecondName.getText(), textLastName.getText(), textBirthday.getText(), textEmail.getText());
		RabbitmqCommandMessage<Person> msg = new RabbitmqCommandMessage<>( command, person);
		actionCommands.get( command ).accept( msg );
	}
	public String getGreeting() {
		return "Hello world.";
	}
	public static void main(String[] args) {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new CabinetInit();
			}
		});
	}
	
}
